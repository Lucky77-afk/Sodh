// SPDX-License-Identifier: MIT
//
// Collaboration Agreement Smart Contract
// Built for Solana using Anchor framework (2025-compatible)
// This contract manages collaborative projects, milestone payments, and value distribution

use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer};
use anchor_spl::associated_token::AssociatedToken;
use solana_program::program_option::COption;
use solana_zk_token_sdk::zk_token_elgamal::pod;
use std::collections::BTreeMap;

declare_id!("Coll1ABbXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxXxX");

// Configurable constants
const MAX_PARTICIPANTS: usize = 10;
const MAX_MILESTONES: usize = 20;
const MAX_NAME_LENGTH: usize = 50;
const MAX_DESCRIPTION_LENGTH: usize = 500;
const MAX_IP_TERMS_LENGTH: usize = 1000;

#[program]
pub mod collaboration_agreement {
    use super::*;

    // Initialize a new collaboration project
    pub fn initialize_project(
        ctx: Context<InitializeProject>,
        name: String,
        description: String,
        ip_terms: String,
    ) -> Result<()> {
        // Validate input lengths
        require!(name.len() <= MAX_NAME_LENGTH, ErrorCode::StringTooLong);
        require!(description.len() <= MAX_DESCRIPTION_LENGTH, ErrorCode::StringTooLong);
        require!(ip_terms.len() <= MAX_IP_TERMS_LENGTH, ErrorCode::StringTooLong);

        let project = &mut ctx.accounts.project;
        project.admin = ctx.accounts.admin.key();
        project.name = name;
        project.description = description;
        project.ip_terms = ip_terms;
        project.created_at = Clock::get()?.unix_timestamp;
        project.active = true;
        project.participant_count = 0;
        project.milestone_count = 0;
        project.usdc_mint = ctx.accounts.usdc_mint.key();
        
        // Initialize project escrow account
        project.escrow_account = ctx.accounts.escrow_account.key();
        
        // Set up authority for the escrow
        project.bump = *ctx.bumps.get("project").unwrap();
        
        emit!(ProjectCreatedEvent {
            project: project.key(),
            admin: project.admin,
            name: project.name.clone(),
            created_at: project.created_at,
        });
        
        Ok(())
    }

    // Add a participant to the project
    pub fn add_participant(
        ctx: Context<AddParticipant>,
        name: String,
        role: String,
        contribution_percentage: u8,
        confidential_details: Vec<u8>,  // Encrypted participant details
    ) -> Result<()> {
        let project = &mut ctx.accounts.project;
        let participant_account = &mut ctx.accounts.participant_account;
        
        // Ensure only admin can add participants
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is still active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure we haven't reached max participants
        require!(
            project.participant_count < MAX_PARTICIPANTS as u8,
            ErrorCode::MaxParticipantsReached
        );
        
        // Validate contribution percentage
        require!(contribution_percentage > 0 && contribution_percentage <= 100, ErrorCode::InvalidPercentage);
        
        // Calculate total percentage after adding this participant
        let mut total_percentage = contribution_percentage;
        for i in 0..project.participant_count as usize {
            if project.participants[i] != Pubkey::default() {
                // Fetch the participant account
                let participant_info = Account::<ParticipantAccount>::try_from_unchecked(
                    &ctx.accounts.system_program.to_account_info(),
                    &project.participants[i],
                )?;
                total_percentage += participant_info.contribution_percentage;
            }
        }
        
        // Ensure total doesn't exceed 100%
        require!(total_percentage <= 100, ErrorCode::InvalidTotalPercentage);
        
        // Set up participant data
        participant_account.project = project.key();
        participant_account.participant = ctx.accounts.participant.key();
        participant_account.name = name;
        participant_account.role = role;
        participant_account.contribution_percentage = contribution_percentage;
        participant_account.joined_at = Clock::get()?.unix_timestamp;
        participant_account.active = true;
        
        // Store encrypted confidential details
        participant_account.confidential_details = confidential_details;
        
        // Add participant to project
        project.participants[project.participant_count as usize] = participant_account.key();
        project.participant_count += 1;
        
        emit!(ParticipantAddedEvent {
            project: project.key(),
            participant: participant_account.participant,
            name: participant_account.name.clone(),
            role: participant_account.role.clone(),
            contribution_percentage: participant_account.contribution_percentage,
        });
        
        Ok(())
    }

    // Add a milestone to the project
    pub fn add_milestone(
        ctx: Context<AddMilestone>,
        title: String,
        description: String,
        deadline: i64,
        payment_amount: u64,
        deliverables: String,
    ) -> Result<()> {
        let project = &mut ctx.accounts.project;
        let milestone_account = &mut ctx.accounts.milestone_account;
        
        // Ensure only admin can add milestones
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is still active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure we haven't reached max milestones
        require!(
            project.milestone_count < MAX_MILESTONES as u8,
            ErrorCode::MaxMilestonesReached
        );
        
        // Validate deadline is in the future
        let current_time = Clock::get()?.unix_timestamp;
        require!(deadline > current_time, ErrorCode::InvalidDeadline);
        
        // Set up milestone data
        milestone_account.project = project.key();
        milestone_account.title = title;
        milestone_account.description = description;
        milestone_account.deadline = deadline;
        milestone_account.payment_amount = payment_amount;
        milestone_account.deliverables = deliverables;
        milestone_account.completed = false;
        milestone_account.approved = false;
        milestone_account.paid = false;
        milestone_account.created_at = current_time;
        
        // Add milestone to project
        project.milestones[project.milestone_count as usize] = milestone_account.key();
        project.milestone_count += 1;
        
        emit!(MilestoneAddedEvent {
            project: project.key(),
            milestone: milestone_account.key(),
            title: milestone_account.title.clone(),
            deadline: milestone_account.deadline,
            payment_amount: milestone_account.payment_amount,
        });
        
        Ok(())
    }

    // Fund a milestone with USDC
    pub fn fund_milestone(
        ctx: Context<FundMilestone>,
        amount: u64,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let milestone = &mut ctx.accounts.milestone_account;
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure milestone belongs to project
        require!(milestone.project == project.key(), ErrorCode::MilestoneMismatch);
        
        // Ensure milestone is not already paid
        require!(!milestone.paid, ErrorCode::MilestoneAlreadyPaid);
        
        // Ensure amount matches milestone payment amount
        require!(amount == milestone.payment_amount, ErrorCode::InvalidPaymentAmount);
        
        // Transfer USDC from funder to escrow account
        let transfer_instruction = Transfer {
            from: ctx.accounts.funder_token_account.to_account_info(),
            to: ctx.accounts.escrow_account.to_account_info(),
            authority: ctx.accounts.funder.to_account_info(),
        };
        
        let seeds = &[
            b"project".as_ref(),
            project.key().as_ref(),
            &[project.bump],
        ];
        let signer = &[&seeds[..]];
        
        let cpi_ctx = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            transfer_instruction,
        );
        
        token::transfer(cpi_ctx, amount)?;
        
        // Update milestone status
        milestone.funded = true;
        milestone.funded_at = Clock::get()?.unix_timestamp;
        
        emit!(MilestoneFundedEvent {
            project: project.key(),
            milestone: milestone.key(),
            funder: ctx.accounts.funder.key(),
            amount: amount,
            funded_at: milestone.funded_at,
        });
        
        Ok(())
    }

    // Mark a milestone as completed
    pub fn complete_milestone(
        ctx: Context<CompleteMilestone>,
        completion_evidence: String,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let milestone = &mut ctx.accounts.milestone_account;
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure milestone belongs to project
        require!(milestone.project == project.key(), ErrorCode::MilestoneMismatch);
        
        // Ensure milestone is not already completed
        require!(!milestone.completed, ErrorCode::MilestoneAlreadyCompleted);
        
        // Ensure milestone is funded
        require!(milestone.funded, ErrorCode::MilestoneNotFunded);
        
        // Mark milestone as completed
        milestone.completed = true;
        milestone.completed_at = Clock::get()?.unix_timestamp;
        milestone.completion_evidence = completion_evidence;
        
        emit!(MilestoneCompletedEvent {
            project: project.key(),
            milestone: milestone.key(),
            completed_by: ctx.accounts.participant.key(),
            completed_at: milestone.completed_at,
        });
        
        Ok(())
    }

    // Approve a completed milestone and distribute funds
    pub fn approve_milestone(
        ctx: Context<ApproveMilestone>,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let milestone = &mut ctx.accounts.milestone_account;
        
        // Ensure only admin can approve milestones
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure milestone belongs to project
        require!(milestone.project == project.key(), ErrorCode::MilestoneMismatch);
        
        // Ensure milestone is completed but not approved
        require!(milestone.completed, ErrorCode::MilestoneNotCompleted);
        require!(!milestone.approved, ErrorCode::MilestoneAlreadyApproved);
        
        // Mark milestone as approved
        milestone.approved = true;
        milestone.approved_at = Clock::get()?.unix_timestamp;
        
        emit!(MilestoneApprovedEvent {
            project: project.key(),
            milestone: milestone.key(),
            approved_by: ctx.accounts.admin.key(),
            approved_at: milestone.approved_at,
        });
        
        Ok(())
    }

    // Distribute milestone payment to participants
    pub fn distribute_milestone_payment(
        ctx: Context<DistributeMilestonePayment>,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let milestone = &mut ctx.accounts.milestone_account;
        
        // Ensure only admin can distribute payments
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure milestone belongs to project and is approved
        require!(milestone.project == project.key(), ErrorCode::MilestoneMismatch);
        require!(milestone.approved, ErrorCode::MilestoneNotApproved);
        require!(!milestone.paid, ErrorCode::MilestoneAlreadyPaid);
        
        // Calculate payment amounts for each participant based on contribution percentages
        // This is a simplified distribution - in a real system you'd want to handle remainders carefully
        let remaining_balance = ctx.accounts.escrow_account.amount;
        require!(remaining_balance >= milestone.payment_amount, ErrorCode::InsufficientFunds);
        
        // Track successfully distributed amount
        let mut total_distributed: u64 = 0;
        
        // Distribute funds to each participant
        for i in 0..project.participant_count as usize {
            if project.participants[i] != Pubkey::default() {
                // Get participant account info
                let participant_pubkey = project.participants[i];
                
                // Find the participant's token account in remaining accounts
                let participant_account = &ctx.remaining_accounts[i * 2];
                let participant_token_account = &ctx.remaining_accounts[i * 2 + 1];
                
                // Deserialize the participant account
                let participant_data = Account::<ParticipantAccount>::try_from(participant_account)?;
                
                // Calculate participant's share
                let participant_share = (milestone.payment_amount as u128)
                    .checked_mul(participant_data.contribution_percentage as u128)
                    .unwrap()
                    .checked_div(100)
                    .unwrap() as u64;
                
                if participant_share > 0 {
                    // Transfer from escrow to participant token account
                    let seeds = &[
                        b"project".as_ref(),
                        project.key().as_ref(),
                        &[project.bump],
                    ];
                    let signer = &[&seeds[..]];
                    
                    let transfer_instruction = Transfer {
                        from: ctx.accounts.escrow_account.to_account_info(),
                        to: participant_token_account.to_account_info(),
                        authority: ctx.accounts.project.to_account_info(),
                    };
                    
                    let cpi_ctx = CpiContext::new_with_signer(
                        ctx.accounts.token_program.to_account_info(),
                        transfer_instruction,
                        signer,
                    );
                    
                    token::transfer(cpi_ctx, participant_share)?;
                    
                    total_distributed += participant_share;
                }
            }
        }
        
        // Mark milestone as paid
        milestone.paid = true;
        milestone.paid_at = Clock::get()?.unix_timestamp;
        milestone.total_distributed = total_distributed;
        
        emit!(MilestonePaymentDistributedEvent {
            project: project.key(),
            milestone: milestone.key(),
            distributed_by: ctx.accounts.admin.key(),
            total_distributed: total_distributed,
            paid_at: milestone.paid_at,
        });
        
        Ok(())
    }

    // Create a confidential transfer using Solana's ZK protocol
    pub fn create_confidential_transfer(
        ctx: Context<CreateConfidentialTransfer>,
        encrypted_amount: pod::ElGamalCiphertext,
        recipient_pubkey: pod::ElGamalPubkey,
        encrypted_details: Vec<u8>,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let transfer = &mut ctx.accounts.confidential_transfer;
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure only admin or participants can create confidential transfers
        let is_admin = project.admin == ctx.accounts.initiator.key();
        let mut is_participant = false;
        
        for i in 0..project.participant_count as usize {
            if project.participants[i] == ctx.accounts.initiator.key() {
                is_participant = true;
                break;
            }
        }
        
        require!(is_admin || is_participant, ErrorCode::Unauthorized);
        
        // Set up confidential transfer data
        transfer.project = project.key();
        transfer.initiator = ctx.accounts.initiator.key();
        transfer.recipient_pubkey = recipient_pubkey;
        transfer.encrypted_amount = encrypted_amount;
        transfer.encrypted_details = encrypted_details;
        transfer.created_at = Clock::get()?.unix_timestamp;
        transfer.settled = false;
        
        emit!(ConfidentialTransferCreatedEvent {
            project: project.key(),
            transfer: transfer.key(),
            initiator: transfer.initiator,
            created_at: transfer.created_at,
        });
        
        Ok(())
    }

    // Settle a confidential transfer
    pub fn settle_confidential_transfer(
        ctx: Context<SettleConfidentialTransfer>,
    ) -> Result<()> {
        let project = &ctx.accounts.project;
        let transfer = &mut ctx.accounts.confidential_transfer;
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Ensure transfer belongs to project
        require!(transfer.project == project.key(), ErrorCode::TransferMismatch);
        
        // Ensure transfer is not already settled
        require!(!transfer.settled, ErrorCode::TransferAlreadySettled);
        
        // Here we would actually settle the confidential transfer using ZK proofs
        // This is a placeholder - real implementation would use Solana's ZK token SDK
        
        // Mark transfer as settled
        transfer.settled = true;
        transfer.settled_at = Clock::get()?.unix_timestamp;
        
        emit!(ConfidentialTransferSettledEvent {
            project: project.key(),
            transfer: transfer.key(),
            settled_at: transfer.settled_at,
        });
        
        Ok(())
    }

    // Update IP terms
    pub fn update_ip_terms(
        ctx: Context<UpdateIPTerms>,
        new_ip_terms: String,
    ) -> Result<()> {
        let project = &mut ctx.accounts.project;
        
        // Ensure only admin can update IP terms
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Validate input length
        require!(new_ip_terms.len() <= MAX_IP_TERMS_LENGTH, ErrorCode::StringTooLong);
        
        // Update IP terms
        project.ip_terms = new_ip_terms;
        project.ip_terms_updated_at = Some(Clock::get()?.unix_timestamp);
        
        emit!(IPTermsUpdatedEvent {
            project: project.key(),
            updated_by: ctx.accounts.admin.key(),
            updated_at: project.ip_terms_updated_at.unwrap(),
        });
        
        Ok(())
    }

    // Close the project (mark as inactive)
    pub fn close_project(
        ctx: Context<CloseProject>,
    ) -> Result<()> {
        let project = &mut ctx.accounts.project;
        
        // Ensure only admin can close project
        require!(project.admin == ctx.accounts.admin.key(), ErrorCode::Unauthorized);
        
        // Ensure project is active
        require!(project.active, ErrorCode::ProjectInactive);
        
        // Check if all milestones are completed and paid
        let mut all_milestones_completed = true;
        
        for i in 0..project.milestone_count as usize {
            if project.milestones[i] != Pubkey::default() {
                let milestone_info = Account::<MilestoneAccount>::try_from_unchecked(
                    &ctx.accounts.system_program.to_account_info(),
                    &project.milestones[i],
                )?;
                
                if !milestone_info.paid {
                    all_milestones_completed = false;
                    break;
                }
            }
        }
        
        require!(all_milestones_completed, ErrorCode::UnpaidMilestones);
        
        // Mark project as inactive
        project.active = false;
        project.closed_at = Some(Clock::get()?.unix_timestamp);
        
        emit!(ProjectClosedEvent {
            project: project.key(),
            closed_by: ctx.accounts.admin.key(),
            closed_at: project.closed_at.unwrap(),
        });
        
        Ok(())
    }
}

// Account that holds the collaboration project details
#[account]
pub struct ProjectAccount {
    pub admin: Pubkey,
    pub name: String,
    pub description: String,
    pub ip_terms: String,
    pub created_at: i64,
    pub active: bool,
    pub participants: [Pubkey; MAX_PARTICIPANTS],  // Array of participant account addresses
    pub participant_count: u8,
    pub milestones: [Pubkey; MAX_MILESTONES],     // Array of milestone account addresses
    pub milestone_count: u8,
    pub usdc_mint: Pubkey,                        // USDC token mint address
    pub escrow_account: Pubkey,                   // Escrow account for holding funds
    pub bump: u8,                                 // Bump seed for PDA
    pub ip_terms_updated_at: Option<i64>,         // Timestamp of last IP terms update
    pub closed_at: Option<i64>,                   // Timestamp when project was closed
}

// Account that holds a participant's details
#[account]
pub struct ParticipantAccount {
    pub project: Pubkey,                       // Reference to parent project
    pub participant: Pubkey,                   // Participant's wallet address
    pub name: String,
    pub role: String,
    pub contribution_percentage: u8,           // Percentage (0-100) of contribution
    pub joined_at: i64,
    pub active: bool,
    pub confidential_details: Vec<u8>,         // Encrypted participant details (using ZK)
}

// Account that holds milestone details
#[account]
pub struct MilestoneAccount {
    pub project: Pubkey,                       // Reference to parent project
    pub title: String,
    pub description: String,
    pub deadline: i64,                         // Unix timestamp deadline
    pub payment_amount: u64,                   // Amount in USDC lamports (6 decimals)
    pub deliverables: String,                  // Description of expected deliverables
    pub completed: bool,
    pub completed_at: i64,                     // Unix timestamp of completion
    pub completion_evidence: String,           // Evidence or proof of completion
    pub approved: bool,
    pub approved_at: i64,                      // Unix timestamp of approval
    pub funded: bool,                          // Whether the milestone has been funded
    pub funded_at: i64,                        // Unix timestamp of funding
    pub paid: bool,
    pub paid_at: i64,                          // Unix timestamp of payment
    pub total_distributed: u64,                // Total amount distributed to participants
    pub created_at: i64,                       // Unix timestamp of creation
}

// Account for confidential transfers
#[account]
pub struct ConfidentialTransferAccount {
    pub project: Pubkey,                       // Reference to parent project
    pub initiator: Pubkey,                     // Address that initiated the transfer
    pub recipient_pubkey: pod::ElGamalPubkey,  // Recipient's ElGamal public key
    pub encrypted_amount: pod::ElGamalCiphertext,  // Encrypted amount
    pub encrypted_details: Vec<u8>,            // Encrypted transfer details
    pub created_at: i64,                       // Unix timestamp of creation
    pub settled: bool,                         // Whether the transfer has been settled
    pub settled_at: i64,                       // Unix timestamp of settlement
}

// Instruction contexts

#[derive(Accounts)]
pub struct InitializeProject<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(
        init,
        payer = admin,
        space = 8 + std::mem::size_of::<ProjectAccount>() + 
                MAX_NAME_LENGTH + MAX_DESCRIPTION_LENGTH + MAX_IP_TERMS_LENGTH + 100, // Buffer
        seeds = [b"project", admin.key().as_ref()],
        bump
    )]
    pub project: Account<'info, ProjectAccount>,
    
    // USDC token mint
    pub usdc_mint: Account<'info, token::Mint>,
    
    // Escrow token account that will hold USDC for the project
    #[account(
        init,
        payer = admin,
        token::mint = usdc_mint,
        token::authority = project,
    )]
    pub escrow_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct AddParticipant<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(mut, has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
    
    pub participant: SystemAccount<'info>,
    
    #[account(
        init,
        payer = admin,
        space = 8 + std::mem::size_of::<ParticipantAccount>() + 200, // Buffer
    )]
    pub participant_account: Account<'info, ParticipantAccount>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct AddMilestone<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(mut, has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
    
    #[account(
        init,
        payer = admin,
        space = 8 + std::mem::size_of::<MilestoneAccount>() + 300, // Buffer
    )]
    pub milestone_account: Account<'info, MilestoneAccount>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct FundMilestone<'info> {
    pub funder: Signer<'info>,
    
    #[account(mut)]
    pub project: Account<'info, ProjectAccount>,
    
    #[account(mut)]
    pub milestone_account: Account<'info, MilestoneAccount>,
    
    #[account(mut)]
    pub funder_token_account: Account<'info, TokenAccount>,
    
    #[account(
        mut,
        token::mint = project.usdc_mint,
        constraint = escrow_account.key() == project.escrow_account
    )]
    pub escrow_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct CompleteMilestone<'info> {
    pub participant: Signer<'info>,
    
    pub project: Account<'info, ProjectAccount>,
    
    #[account(mut)]
    pub milestone_account: Account<'info, MilestoneAccount>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct ApproveMilestone<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
    
    #[account(mut)]
    pub milestone_account: Account<'info, MilestoneAccount>,
}

#[derive(Accounts)]
pub struct DistributeMilestonePayment<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(mut, has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
    
    #[account(mut)]
    pub milestone_account: Account<'info, MilestoneAccount>,
    
    #[account(
        mut,
        token::mint = project.usdc_mint,
        constraint = escrow_account.key() == project.escrow_account
    )]
    pub escrow_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    
    // Participant accounts and their token accounts are passed in as remaining_accounts
    // for each participant: [participant_account, participant_token_account]
}

#[derive(Accounts)]
pub struct CreateConfidentialTransfer<'info> {
    #[account(mut)]
    pub initiator: Signer<'info>,
    
    pub project: Account<'info, ProjectAccount>,
    
    #[account(
        init,
        payer = initiator,
        space = 8 + std::mem::size_of::<ConfidentialTransferAccount>() + 500, // Buffer for encrypted data
    )]
    pub confidential_transfer: Account<'info, ConfidentialTransferAccount>,
    
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct SettleConfidentialTransfer<'info> {
    #[account(mut)]
    pub settler: Signer<'info>,
    
    pub project: Account<'info, ProjectAccount>,
    
    #[account(mut)]
    pub confidential_transfer: Account<'info, ConfidentialTransferAccount>,
}

#[derive(Accounts)]
pub struct UpdateIPTerms<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(mut, has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
}

#[derive(Accounts)]
pub struct CloseProject<'info> {
    #[account(mut)]
    pub admin: Signer<'info>,
    
    #[account(mut, has_one = admin)]
    pub project: Account<'info, ProjectAccount>,
    
    pub system_program: Program<'info, System>,
}

// Error codes
#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access")]
    Unauthorized,
    
    #[msg("Project is inactive")]
    ProjectInactive,
    
    #[msg("Maximum number of participants reached")]
    MaxParticipantsReached,
    
    #[msg("Maximum number of milestones reached")]
    MaxMilestonesReached,
    
    #[msg("Invalid contribution percentage")]
    InvalidPercentage,
    
    #[msg("Total contribution percentage exceeds 100%")]
    InvalidTotalPercentage,
    
    #[msg("Milestone deadline must be in the future")]
    InvalidDeadline,
    
    #[msg("Milestone does not belong to this project")]
    MilestoneMismatch,
    
    #[msg("Milestone is already completed")]
    MilestoneAlreadyCompleted,
    
    #[msg("Milestone is not completed yet")]
    MilestoneNotCompleted,
    
    #[msg("Milestone is already approved")]
    MilestoneAlreadyApproved,
    
   #[msg("Milestone is not approved yet")]
    MilestoneNotApproved,
    
    #[msg("Milestone is already paid")]
    MilestoneAlreadyPaid,
    
    #[msg("Milestone is not funded yet")]
    MilestoneNotFunded,
    
    #[msg("Invalid payment amount")]
    InvalidPaymentAmount,
    
    #[msg("Insufficient funds in escrow")]
    InsufficientFunds,
    
    #[msg("Confidential transfer does not belong to this project")]
    TransferMismatch,
    
    #[msg("Transfer is already settled")]
    TransferAlreadySettled,
    
    #[msg("String exceeds maximum length")]
    StringTooLong,
    
    #[msg("Cannot close project with unpaid milestones")]
    UnpaidMilestones,
}

// Events for tracking activity on-chain

#[event]
pub struct ProjectCreatedEvent {
    pub project: Pubkey,
    pub admin: Pubkey,
    pub name: String,
    pub created_at: i64,
}

#[event]
pub struct ParticipantAddedEvent {
    pub project: Pubkey,
    pub participant: Pubkey,
    pub name: String,
    pub role: String,
    pub contribution_percentage: u8,
}

#[event]
pub struct MilestoneAddedEvent {
    pub project: Pubkey,
    pub milestone: Pubkey,
    pub title: String,
    pub deadline: i64,
    pub payment_amount: u64,
}

#[event]
pub struct MilestoneFundedEvent {
    pub project: Pubkey,
    pub milestone: Pubkey,
    pub funder: Pubkey,
    pub amount: u64,
    pub funded_at: i64,
}

#[event]
pub struct MilestoneCompletedEvent {
    pub project: Pubkey,
    pub milestone: Pubkey,
    pub completed_by: Pubkey,
    pub completed_at: i64,
}

#[event]
pub struct MilestoneApprovedEvent {
    pub project: Pubkey,
    pub milestone: Pubkey,
    pub approved_by: Pubkey,
    pub approved_at: i64,
}

#[event]
pub struct MilestonePaymentDistributedEvent {
    pub project: Pubkey,
    pub milestone: Pubkey,
    pub distributed_by: Pubkey,
    pub total_distributed: u64,
    pub paid_at: i64,
}

#[event]
pub struct ConfidentialTransferCreatedEvent {
    pub project: Pubkey,
    pub transfer: Pubkey,
    pub initiator: Pubkey,
    pub created_at: i64,
}

#[event]
pub struct ConfidentialTransferSettledEvent {
    pub project: Pubkey,
    pub transfer: Pubkey,
    pub settled_at: i64,
}

#[event]
pub struct IPTermsUpdatedEvent {
    pub project: Pubkey,
    pub updated_by: Pubkey,
    pub updated_at: i64,
}

#[event]
pub struct ProjectClosedEvent {
    pub project: Pubkey,
    pub closed_by: Pubkey,
    pub closed_at: i64,
}