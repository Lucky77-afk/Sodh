import * as anchor from '@project-serum/anchor';
import { Program } from '@project-serum/anchor';
import { PublicKey, Keypair, SystemProgram } from '@solana/web3.js';
import { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';
import { assert } from 'chai';
import { CollaborationAgreement } from '../target/types/collaboration_agreement';

describe('collaboration_agreement', () => {
  // Configure the client to use the local cluster
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.CollaborationAgreement as Program<CollaborationAgreement>;
  
  // Test accounts
  const admin = anchor.web3.Keypair.generate();
  const participant1 = anchor.web3.Keypair.generate();
  const participant2 = anchor.web3.Keypair.generate();
  const participant3 = anchor.web3.Keypair.generate();
  
  // Project account
  let projectPDA = null;
  let projectBump = null;
  
  // USDC mint and accounts
  let usdcMint = null;
  let escrowAccount = null;
  let adminTokenAccount = null;
  let participant1TokenAccount = null;
  let participant2TokenAccount = null;
  let participant3TokenAccount = null;
  
  // Accounts created during tests
  let participantAccount1 = null;
  let participantAccount2 = null;
  let participantAccount3 = null;
  let milestone1 = null;
  let milestone2 = null;
  let confidentialTransfer = null;

  it('Initializes test environment', async () => {
    // Airdrop SOL to admin and participants
    await provider.connection.confirmTransaction(
      await provider.connection.requestAirdrop(admin.publicKey, 10000000000),
      "confirmed"
    );
    
    // Create USDC mint (for testing we create our own)
    usdcMint = await Token.createMint(
      provider.connection,
      admin,
      admin.publicKey,
      null,
      6, // 6 decimals like USDC
      TOKEN_PROGRAM_ID
    );
    
    // Create token accounts for admin and participants
    adminTokenAccount = await usdcMint.createAccount(admin.publicKey);
    participant1TokenAccount = await usdcMint.createAccount(participant1.publicKey);
    participant2TokenAccount = await usdcMint.createAccount(participant2.publicKey);
    participant3TokenAccount = await usdcMint.createAccount(participant3.publicKey);
    
    // Mint some USDC to admin (1000 USDC = 1,000,000,000 tokens with 6 decimals)
    await usdcMint.mintTo(
      adminTokenAccount,
      admin.publicKey,
      [],
      1000000000
    );
    
    // Find PDA for project
    const [projectAddr, bump] = await PublicKey.findProgramAddress(
      [Buffer.from("project"), admin.publicKey.toBuffer()],
      program.programId
    );
    projectPDA = projectAddr;
    projectBump = bump;
    
    // Create escrow account PDA
    const [escrowAddr, _] = await PublicKey.findProgramAddress(
      [Buffer.from("escrow"), projectPDA.toBuffer()],
      program.programId
    );
    escrowAccount = escrowAddr;
  });

  it('Initializes a collaboration project', async () => {
    const projectName = "Quantum Research Collaboration";
    const projectDescription = "A collaborative project to research quantum computing applications in bioinformatics";
    const ipTerms = "All intellectual property developed through this collaboration will be jointly owned by participants proportional to their contribution percentage.";
    
    // Initialize project
    await program.methods.initializeProject(projectName, projectDescription, ipTerms)
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        usdcMint: usdcMint.publicKey,
        escrowAccount: escrowAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: anchor.spl.ASSOCIATED_TOKEN_PROGRAM_ID,
        systemProgram: SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      })
      .signers([admin])
      .rpc();
    
    // Fetch the created project
    const projectAccount = await program.account.projectAccount.fetch(projectPDA);
    
    // Verify project data
    assert.equal(projectAccount.admin.toString(), admin.publicKey.toString());
    assert.equal(projectAccount.name, projectName);
    assert.equal(projectAccount.description, projectDescription);
    assert.equal(projectAccount.ipTerms, ipTerms);
    assert.equal(projectAccount.active, true);
    assert.equal(projectAccount.participantCount, 0);
    assert.equal(projectAccount.milestoneCount, 0);
  });

  it('Adds participants to the project', async () => {
    // Create participant 1
    participantAccount1 = anchor.web3.Keypair.generate();
    
    await program.methods.addParticipant(
      "Dr. Alice Johnson", 
      "Lead Researcher", 
      40, // 40% contribution
      Buffer.from("Encrypted details for Dr. Johnson")
    )
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        participant: participant1.publicKey,
        participantAccount: participantAccount1.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, participantAccount1])
      .rpc();
    
    // Create participant 2
    participantAccount2 = anchor.web3.Keypair.generate();
    
    await program.methods.addParticipant(
      "Dr. Bob Smith", 
      "Quantum Algorithm Specialist", 
      35, // 35% contribution
      Buffer.from("Encrypted details for Dr. Smith")
    )
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        participant: participant2.publicKey,
        participantAccount: participantAccount2.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, participantAccount2])
      .rpc();
    
    // Create participant 3
    participantAccount3 = anchor.web3.Keypair.generate();
    
    await program.methods.addParticipant(
      "Dr. Carol Williams", 
      "Bioinformatics Expert", 
      25, // 25% contribution
      Buffer.from("Encrypted details for Dr. Williams")
    )
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        participant: participant3.publicKey,
        participantAccount: participantAccount3.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, participantAccount3])
      .rpc();
    
    // Verify project participants
    const projectAccount = await program.account.projectAccount.fetch(projectPDA);
    assert.equal(projectAccount.participantCount, 3);
    
    // Verify participant 1 details
    const participant1Data = await program.account.participantAccount.fetch(participantAccount1.publicKey);
    assert.equal(participant1Data.name, "Dr. Alice Johnson");
    assert.equal(participant1Data.role, "Lead Researcher");
    assert.equal(participant1Data.contributionPercentage, 40);
    
    // Verify participant 2 details
    const participant2Data = await program.account.participantAccount.fetch(participantAccount2.publicKey);
    assert.equal(participant2Data.name, "Dr. Bob Smith");
    assert.equal(participant2Data.role, "Quantum Algorithm Specialist");
    assert.equal(participant2Data.contributionPercentage, 35);
    
    // Verify participant 3 details
    const participant3Data = await program.account.participantAccount.fetch(participantAccount3.publicKey);
    assert.equal(participant3Data.name, "Dr. Carol Williams");
    assert.equal(participant3Data.role, "Bioinformatics Expert");
    assert.equal(participant3Data.contributionPercentage, 25);
  });

  it('Creates milestones for the project', async () => {
    // Create milestone 1
    milestone1 = anchor.web3.Keypair.generate();
    
    const oneMonthFromNow = Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60);
    
    await program.methods.addMilestone(
      "Initial Quantum Algorithm Design",
      "Develop the theoretical framework for quantum algorithms targeting protein folding predictions",
      new anchor.BN(oneMonthFromNow),
      new anchor.BN(50000000), // 50 USDC (with 6 decimals)
      "Complete documentation of algorithm design and simulation results"
    )
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone1.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, milestone1])
      .rpc();
    
    // Create milestone 2
    milestone2 = anchor.web3.Keypair.generate();
    
    const twoMonthsFromNow = Math.floor(Date.now() / 1000) + (60 * 24 * 60 * 60);
    
    await program.methods.addMilestone(
      "Prototype Implementation",
      "Implement prototype of quantum algorithm on simulator and analyze performance",
      new anchor.BN(twoMonthsFromNow),
      new anchor.BN(100000000), // 100 USDC (with 6 decimals)
      "Working prototype with performance analysis and report"
    )
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone2.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, milestone2])
      .rpc();
    
    // Verify project milestones
    const projectAccount = await program.account.projectAccount.fetch(projectPDA);
    assert.equal(projectAccount.milestoneCount, 2);
    
    // Verify milestone 1 details
    const milestone1Data = await program.account.milestoneAccount.fetch(milestone1.publicKey);
    assert.equal(milestone1Data.title, "Initial Quantum Algorithm Design");
    assert.equal(milestone1Data.paymentAmount.toNumber(), 50000000);
    assert.equal(milestone1Data.completed, false);
    
    // Verify milestone 2 details
    const milestone2Data = await program.account.milestoneAccount.fetch(milestone2.publicKey);
    assert.equal(milestone2Data.title, "Prototype Implementation");
    assert.equal(milestone2Data.paymentAmount.toNumber(), 100000000);
    assert.equal(milestone2Data.completed, false);
  });

  it('Funds a milestone', async () => {
    await program.methods.fundMilestone(new anchor.BN(50000000))
      .accounts({
        funder: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone1.publicKey,
        funderTokenAccount: adminTokenAccount,
        escrowAccount: escrowAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([admin])
      .rpc();
    
    // Verify milestone is funded
    const milestone1Data = await program.account.milestoneAccount.fetch(milestone1.publicKey);
    assert.equal(milestone1Data.funded, true);
    
    // Verify escrow account balance
    const escrowBalance = await provider.connection.getTokenAccountBalance(escrowAccount);
    assert.equal(escrowBalance.value.amount, "50000000");
  });

  it('Completes a milestone', async () => {
    await program.methods.completeMilestone("https://github.com/repo/quantum-algo-design-evidence")
      .accounts({
        participant: participant1.publicKey,
        project: projectPDA,
        milestoneAccount: milestone1.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([participant1])
      .rpc();
    
    // Verify milestone is completed
    const milestone1Data = await program.account.milestoneAccount.fetch(milestone1.publicKey);
    assert.equal(milestone1Data.completed, true);
    assert.equal(milestone1Data.completionEvidence, "https://github.com/repo/quantum-algo-design-evidence");
  });

  it('Approves a milestone', async () => {
    await program.methods.approveMilestone()
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone1.publicKey,
      })
      .signers([admin])
      .rpc();
    
    // Verify milestone is approved
    const milestone1Data = await program.account.milestoneAccount.fetch(milestone1.publicKey);
    assert.equal(milestone1Data.approved, true);
  });

  it('Distributes milestone payment to participants', async () => {
    // Create array of remaining accounts for all participants
    const remainingAccounts = [
      { pubkey: participantAccount1.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant1TokenAccount, isWritable: true, isSigner: false },
      { pubkey: participantAccount2.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant2TokenAccount, isWritable: true, isSigner: false },
      { pubkey: participantAccount3.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant3TokenAccount, isWritable: true, isSigner: false },
    ];
    
    await program.methods.distributeMilestonePayment()
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone1.publicKey,
        escrowAccount: escrowAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .remainingAccounts(remainingAccounts)
      .signers([admin])
      .rpc();
    
    // Verify milestone is paid
    const milestone1Data = await program.account.milestoneAccount.fetch(milestone1.publicKey);
    assert.equal(milestone1Data.paid, true);
    
    // Verify token balances
    const p1Balance = await provider.connection.getTokenAccountBalance(participant1TokenAccount);
    const p2Balance = await provider.connection.getTokenAccountBalance(participant2TokenAccount);
    const p3Balance = await provider.connection.getTokenAccountBalance(participant3TokenAccount);
    
    // Expected distributions based on contribution percentages:
    // p1 (40%): 20,000,000 (20 USDC)
    // p2 (35%): 17,500,000 (17.5 USDC)
    // p3 (25%): 12,500,000 (12.5 USDC)
    assert.equal(p1Balance.value.amount, "20000000");
    assert.equal(p2Balance.value.amount, "17500000");
    assert.equal(p3Balance.value.amount, "12500000");
    
    // Verify escrow account has been emptied
    const escrowBalance = await provider.connection.getTokenAccountBalance(escrowAccount);
    assert.equal(escrowBalance.value.amount, "0");
  });

  it('Creates a confidential transfer', async () => {
    confidentialTransfer = anchor.web3.Keypair.generate();
    
    // Mock encrypted data for testing
    const mockEncryptedAmount = Buffer.alloc(32, 1); // Simplified for testing
    const mockRecipientPubkey = Buffer.alloc(32, 2); // Simplified for testing
    const mockEncryptedDetails = Buffer.from("Encrypted royalty payment details");
    
    await program.methods.createConfidentialTransfer(
      mockEncryptedAmount,
      mockRecipientPubkey,
      mockEncryptedDetails
    )
      .accounts({
        initiator: admin.publicKey,
        project: projectPDA,
        confidentialTransfer: confidentialTransfer.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin, confidentialTransfer])
      .rpc();
    
    // Verify confidential transfer was created
    const transferData = await program.account.confidentialTransferAccount.fetch(confidentialTransfer.publicKey);
    assert.equal(transferData.initiator.toString(), admin.publicKey.toString());
    assert.equal(transferData.settled, false);
  });

  it('Settles a confidential transfer', async () => {
    await program.methods.settleConfidentialTransfer()
      .accounts({
        settler: admin.publicKey,
        project: projectPDA,
        confidentialTransfer: confidentialTransfer.publicKey,
      })
      .signers([admin])
      .rpc();
    
    // Verify confidential transfer was settled
    const transferData = await program.account.confidentialTransferAccount.fetch(confidentialTransfer.publicKey);
    assert.equal(transferData.settled, true);
  });

  it('Updates IP terms', async () => {
    const newIpTerms = "Updated IP terms: All intellectual property will be licensed under MIT license, with royalties distributed based on contribution percentages.";
    
    await program.methods.updateIpTerms(newIpTerms)
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
      })
      .signers([admin])
      .rpc();
    
    // Verify IP terms were updated
    const projectAccount = await program.account.projectAccount.fetch(projectPDA);
    assert.equal(projectAccount.ipTerms, newIpTerms);
    assert.isNotNull(projectAccount.ipTermsUpdatedAt);
  });

  it('Closes the project after all milestones are completed', async () => {
    // First we need to fund, complete, approve and pay milestone 2
    
    // Fund milestone 2
    await program.methods.fundMilestone(new anchor.BN(100000000))
      .accounts({
        funder: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone2.publicKey,
        funderTokenAccount: adminTokenAccount,
        escrowAccount: escrowAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .signers([admin])
      .rpc();
    
    // Complete milestone 2
    await program.methods.completeMilestone("https://github.com/repo/quantum-prototype-evidence")
      .accounts({
        participant: participant2.publicKey,
        project: projectPDA,
        milestoneAccount: milestone2.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .signers([participant2])
      .rpc();
    
    // Approve milestone 2
    await program.methods.approveMilestone()
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone2.publicKey,
      })
      .signers([admin])
      .rpc();
    
    // Distribute payment for milestone 2
    const remainingAccounts = [
      { pubkey: participantAccount1.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant1TokenAccount, isWritable: true, isSigner: false },
      { pubkey: participantAccount2.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant2TokenAccount, isWritable: true, isSigner: false },
      { pubkey: participantAccount3.publicKey, isWritable: true, isSigner: false },
      { pubkey: participant3TokenAccount, isWritable: true, isSigner: false },
    ];
    
    await program.methods.distributeMilestonePayment()
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        milestoneAccount: milestone2.publicKey,
        escrowAccount: escrowAccount,
        tokenProgram: TOKEN_PROGRAM_ID,
      })
      .remainingAccounts(remainingAccounts)
      .signers([admin])
      .rpc();
    
    // Now close the project
    await program.methods.closeProject()
      .accounts({
        admin: admin.publicKey,
        project: projectPDA,
        systemProgram: SystemProgram.programId,
      })
      .signers([admin])
      .rpc();
    
    // Verify project is closed
    const projectAccount = await program.account.projectAccount.fetch(projectPDA);
    assert.equal(projectAccount.active, false);
    assert.isNotNull(projectAccount.closedAt);
  });
});