"""
DAPPR Client for interacting with the DAPPR smart contracts on Solana
"""
from solana.rpc.api import Client
from solana.keypair import Keypair
from solana.publickey import PublicKey
from solana.transaction import Transaction
from solana.system_program import CreateAccountParams, create_account
from solana.sysvar import SYSVAR_RENT_PUBKEY
import base64
import json

# Import the generated IDL (Interface Definition Language) from the compiled program
# This would be generated by the Solana CLI after building the program

class DapprClient:
    def __init__(self, rpc_url: str, program_id: str, wallet: Keypair):
        """
        Initialize the DAPPR client
        
        Args:
            rpc_url: URL of the Solana RPC endpoint
            program_id: Public key of the deployed DAPPR program
            wallet: Keypair of the wallet to use for transactions
        """
        self.client = Client(rpc_url)
        self.program_id = PublicKey(program_id)
        self.wallet = wallet
    
    async def create_project(
        self,
        title: str,
        description: str,
        funding_goal: int,
        ip_terms: dict
    ) -> str:
        """
        Create a new research project
        
        Args:
            title: Project title
            description: Project description
            funding_goal: Funding goal in lamports
            ip_terms: Dictionary containing IP terms
            
        Returns:
            Transaction signature
        """
        # Generate a new keypair for the project account
        project_keypair = Keypair()
        
        # Calculate space required for the project account
        space = 1024  # Adjust based on actual size needed
        
        # Get minimum rent exemption
        rent = self.client.get_minimum_balance_for_rent_exemption(space)
        
        # Create the transaction
        transaction = Transaction()
        
        # Add instruction to create the account
        transaction.add(
            create_account(
                CreateAccountParams(
                    from_pubkey=self.wallet.public_key,
                    new_account_pubkey=project_keypair.public_key,
                    lamports=rent,
                    space=space,
                    program_id=self.program_id,
                )
            )
        )
        
        # Add instruction to initialize the project
        # This would be replaced with actual program instruction
        # transaction.add(...)
        
        # Sign and send the transaction
        result = self.client.send_transaction(
            transaction,
            self.wallet,
            project_keypair  # New account keypair needs to sign
        )
        
        return result['result']
    
    async def fund_project(self, project_pubkey: str, amount: int) -> str:
        """
        Fund an existing project
        
        Args:
            project_pubkey: Public key of the project
            amount: Amount to fund in lamports
            
        Returns:
            Transaction signature
        """
        # Implementation would include:
        # 1. Create transfer instruction
        # 2. Send transaction
        pass
    
    async def add_milestone(
        self,
        project_pubkey: str,
        title: str,
        description: str,
        deadline: int,
        reward: int
    ) -> str:
        """
        Add a milestone to a project
        
        Args:
            project_pubkey: Public key of the project
            title: Milestone title
            description: Milestone description
            deadline: Unix timestamp for milestone deadline
            reward: Reward amount in lamports
            
        Returns:
            Transaction signature
        """
        # Implementation would include:
        # 1. Create add_milestone instruction
        # 2. Send transaction
        pass
    
    async def get_project_info(self, project_pubkey: str) -> dict:
        """
        Get information about a project
        
        Args:
            project_pubkey: Public key of the project
            
        Returns:
            Dictionary containing project information
        """
        # Implementation would include:
        # 1. Fetch account data
        # 2. Deserialize using Borsh
        pass

# Example usage
if __name__ == "__main__":
    import asyncio
    from solana.keypair import Keypair
    
    # Example configuration
    RPC_URL = "https://api.devnet.solana.com"  # Use devnet for testing
    PROGRAM_ID = "DAPPR1111111111111111111111111111111111111"  # Replace with actual program ID
    
    # Load or generate a wallet
    wallet = Keypair()  # In production, load from a secure source
    
    # Initialize client
    client = DapprClient(RPC_URL, PROGRAM_ID, wallet)
    
    # Example: Create a project
    async def example_create_project():
        ip_terms = {
            "ownership_split": [str(wallet.public_key), 100],
            "license_type": "MIT",
            "commercial_rights": True
        }
        
        try:
            tx_sig = await client.create_project(
                title="Blockchain Research",
                description="Research on blockchain scalability",
                funding_goal=1000000000,  # 1 SOL
                ip_terms=ip_terms
            )
            print(f"Project created! Transaction: {tx_sig}")
        except Exception as e:
            print(f"Error creating project: {e}")
    
    # Run the example
    asyncio.run(example_create_project())
